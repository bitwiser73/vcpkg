# TODO
#
#    /* Enable large inode numbers on Mac OS X 10.5.  */
#    #ifndef _DARWIN_USE_64_BIT_INODE
#    # define _DARWIN_USE_64_BIT_INODE 1
#    #endif
#    
#    /* Number of bits in a file offset, on hosts where this is settable. */
#    #undef _FILE_OFFSET_BITS
#    
#    /* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */
#    #undef _LARGEFILE_SOURCE
#    
#    /* Define for large files, on AIX-style hosts. */
#    #undef _LARGE_FILES
#    
# main.h: remove unistd.h
# replace ftello, fseeko
#   - There are no functions that returns/use off_t, if you need a 64bit position you can use: _fseeki64 _ftelli64
#   - Look here fseek, _fseeki64, ftell, and _ftelli64

cmake_minimum_required(VERSION 3.11)
cmake_policy(VERSION 3.11)

option(SSDEEP_DISABLE_POSITION_ARRAY
    "Disable bit-parallel string operations." OFF)

option(INSTALL_HEADERS "Install public header files" ON)

project(ssdeep C)

include(CheckIncludeFile)
include(CheckFunctionExists)

check_include_file(dirent.h HAVE_DIRENT_H)
check_include_file(dlfcn.h HAVE_DLFCN_H)
check_include_file(fcntl.h HAVE_FCNTL_H)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(libgen.h HAVE_LIBGEN_H)
check_include_file(memory.h HAVE_MEMORY_H)
check_include_file(stdint.h HAVE_STDINT_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
check_include_file(strings.h HAVE_STRINGS_H)
check_include_file(string.h HAVE_STRING_H)
check_include_file(sys/disk.h HAVE_SYS_DISK_H)
check_include_file(sys/ioctl.h HAVE_SYS_IOCTL_H)
check_include_file(sys/mount.h HAVE_SYS_MOUNT_H)
check_include_file(sys/param.h HAVE_SYS_PARAM_H)
check_include_file(sys/stat.h HAVE_SYS_STAT_H)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(unistd.h HAVE_UNISTD_H)
check_include_file(wchar.h HAVE_WCHAR_H)

check_function_exists(ftello.h HAVE_FSEEKO)

configure_file(config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/config.h)

add_library(fuzzy
    cycles.cpp
    dig.cpp
    edit_dist.c
    edit_dist.c
    engine.cpp
    filedata.cpp
    find-file-size.c
    fuzzy.c
    fuzzy.c
    helpers.cpp
    main.cpp
    match.cpp
    ui.cpp
)

target_compile_definitions(fuzzy
    PRIVATE
        -DHAVE_CONFIG_H
)

target_include_directories(fuzzy
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}
)

#target_compile_options(fuzzy
#    PRIVATE
#        $<$<CONFIG:RELEASE>:/guard:cf>
#)

# ssdeep.h ???
set(PUBLIC_HEADERS
    fuzzy.h
)

if(INSTALL_HEADERS)
    set_target_properties(fuzzy PROPERTIES PUBLIC_HEADER "${PUBLIC_HEADERS}")
endif()

install(
    TARGETS fuzzy
    EXPORT fuzzy
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    PUBLIC_HEADER DESTINATION include
)

install(
    EXPORT fuzzy
    DESTINATION share/ssdeep
    FILE fuzzyConfig.cmake
    NAMESPACE ssdeep::
    CONFIGURATIONS Release
)
